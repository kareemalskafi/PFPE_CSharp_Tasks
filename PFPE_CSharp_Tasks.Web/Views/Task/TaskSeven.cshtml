@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer localizer

@{
    ViewData["Title"] = "Task 7";
}

<pre>

using System;
using System.Linq;
using System.Collections.Generic;

class Program
{
    static void Main()
    {

        ------------------------------------------------------------------------------------------
        // Task 1: Add n to the number passed to it
        ------------------------------------------------------------------------------------------

        Console.WriteLine(Add(10)(20)); // Expected output: 30
        Console.WriteLine(Add(0)(20)); // Expected output: 20
        Console.WriteLine(Add(-30)(80)); // Expected output: 50


                                -----------------------------------------
              static Func<int, int> Add(int n)
                {
                     return m => m + n;
                }

        ------------------------------------------------------------------------------------------
        // Task 2: Remove leading and trailing zeros from a string representation of a number
        ------------------------------------------------------------------------------------------

        Console.WriteLine(removeLeadingTrailing("230.000")); // Expected output: "230"
        Console.WriteLine(removeLeadingTrailing("00402")); // Expected output: "402"
        Console.WriteLine(removeLeadingTrailing("03.1400")); // Expected output: "3.14"
        Console.WriteLine(removeLeadingTrailing("30")); // Expected output: "30"


                                -----------------------------------------
              static string removeLeadingTrailing(string n)
              {
                  return Convert.ToDecimal(n).ToString().TrimEnd('0').TrimEnd('.');
              }

        ------------------------------------------------------------------------------------------
        // Task 3: Find the second largest number in an array
        ------------------------------------------------------------------------------------------

        Console.WriteLine(secondLargest(new int[] { 10, 40, 30, 20, 50 })); // Expected output: 40
        Console.WriteLine(secondLargest(new int[] { 25, 143, 89, 13, 105 })); // Expected output: 105
        Console.WriteLine(secondLargest(new int[] { 54, 23, 11, 17, 10 })); // Expected output: 23


                                -----------------------------------------
             static int secondLargest(int[] nums)
             {
                 Array.Sort(nums);
                 return nums[nums.Length - 2];
             }

        ------------------------------------------------------------------------------------------
        // Task 4: Check if the number is a repdigit
        ------------------------------------------------------------------------------------------

        Console.WriteLine(isRepdigit(66)); // Expected output: true
        Console.WriteLine(isRepdigit(0)); // Expected output: true
        Console.WriteLine(isRepdigit(-11)); // Expected output: false


                                -----------------------------------------
            static bool isRepdigit(int num)
            {
                return num >= 0 && num.ToString().Distinct().Count() == 1;
            }

        ------------------------------------------------------------------------------------------
        // Task 5: Reverse words in a string
        ------------------------------------------------------------------------------------------

        Console.WriteLine(reverseWords(" the sky is blue")); // Expected output: "blue is sky the"
        Console.WriteLine(reverseWords("hello world! ")); // Expected output: "world! hello"
        Console.WriteLine(reverseWords("a good example")); // Expected output: "example good a"


                                -----------------------------------------
           static string reverseWords(string str)
           {
               string[] words = str.Trim().Split(' ');
               Array.Reverse(words);
               return string.Join(" ", words);
           }

        ------------------------------------------------------------------------------------------
        // Task 6: Create a function that takes an array of numbers and returns "Boom!" if the digit 7 appears in the array.
        // Otherwise, return "there is no 7 in the array".
        ------------------------------------------------------------------------------------------


        Console.WriteLine(sevenBoom(new int[] { 1, 2, 3, 4, 5, 6, 7 })); // Expected output: "Boom!"
        Console.WriteLine(sevenBoom(new int[] { 8, 6, 33, 100 })); // Expected output: "there is no 7 in the array"
        Console.WriteLine(sevenBoom(new int[] { 2, 55, 60, 97, 86 })); // Expected output: "Boom!"


                                -----------------------------------------
            static string sevenBoom(int[] arr)
            {
                return arr.Any(x => x.ToString().Contains('7')) ? "Boom!" : "there is no 7 in the array";
            }

        ------------------------------------------------------------------------------------------
        // Task 7: Write a function that inserts a white space between every instance of a lower character followed immediately by an upper character.
        ------------------------------------------------------------------------------------------

        Console.WriteLine(insertWhitespace("SheWalksToTheBeach")); // Expected output: "She Walks To The Beach"
        Console.WriteLine(insertWhitespace("MarvinTalksTooMuch")); // Expected output: "Marvin Talks Too Much"
        Console.WriteLine(insertWhitespace("TheGreatestUpsetInHistory")); // Expected output: "The Greatest Upset In History"


                                -----------------------------------------
           static string insertWhitespace(string str)
           {
               return string.Concat(str.Select((x, i) => i > 0 && char.IsUpper(x) && char.IsLower(str[i - 1]) ? " " + x.ToString() : x.ToString()));
           }

        ------------------------------------------------------------------------------------------
        // Task 8: Create a function which returns the number of true values there are in an array.
        ------------------------------------------------------------------------------------------

        Console.WriteLine(countTrue(new bool[] { true, false, false, true, false })); // Expected output: 2
        Console.WriteLine(countTrue(new bool[] { false, false, false, false })); // Expected output: 0
        Console.WriteLine(countTrue(new bool[] { })); // Expected output: 0


                                -----------------------------------------
            static int countTrue(bool[] arr)
            {
                return arr.Count(x => x);
            }

        ------------------------------------------------------------------------------------------
        // Task 9: Create a function that moves all capital letters to the front of a word.
        ------------------------------------------------------------------------------------------

        Console.WriteLine(capToFront("hApPy")); // Expected output: "APhpy"
        Console.WriteLine(capToFront("moveMENT")); // Expected output: "MENTmove"
        Console.WriteLine(capToFront("shOrtCAKE")); // Expected output: "OCAKEshrt"


                                -----------------------------------------
            static string capToFront(string str)
            {
                var capitalLetters = str.Where(char.IsUpper);
                var lowerLetters = str.Where(char.IsLower);
                return string.Concat(capitalLetters) + string.Concat(lowerLetters);
            }

        ------------------------------------------------------------------------------------------
        // Task 10: Create a function that takes an array of items and checks if the last item matches the rest of the array concatenated together.
        ------------------------------------------------------------------------------------------

        Console.WriteLine(matchLastItem(new object[] { "rsq", "6hi", "g", "rsq6hig" })); // Expected output: true
        Console.WriteLine(matchLastItem(new object[] { 1, 1, 1, "11" })); // Expected output: false
        Console.WriteLine(matchLastItem(new object[] { 8, "thunder", true, "8thundertrue" })); // Expected output: true
    

                                -----------------------------------------
            static bool matchLastItem(object[] arr)
            {
                string concatenatedItems = string.Join("", arr.Take(arr.Length - 1));
                string lastItem = arr.Last().ToString();
           
                return concatenatedItems == lastItem;
            }



        ------------------------------------------------------------------------------------------
        // Task 11: Find NaN in an array of numbers
        ------------------------------------------------------------------------------------------

        Console.WriteLine(findNaN(new double[] { 1, 2, double.NaN })); // Expected output: 2
        Console.WriteLine(findNaN(new double[] { double.NaN, 1, 2, 3, 4 })); // Expected output: 0
        Console.WriteLine(findNaN(new double[] { 0, 1, 2, 3, 4 })); // Expected output: -1


ر                                -----------------------------------------
           static int findNaN(double[] arr)
           {
               for (int i = 0; i < arr.Length; i++)
               {
                   if (double.IsNaN(arr[i]))
                   {
                       return i;
                   }
               }
               return -1;
           }

        ------------------------------------------------------------------------------------------
        // Task 12: Remove duplicates from an array
        ------------------------------------------------------------------------------------------

        Console.WriteLine(string.Join(", ", removeDups(new object[] { 1, 0, 1, 0 }))); // Expected output: "1, 0"
        Console.WriteLine(string.Join(", ", removeDups(new object[] { "The", "big", "cat" }))); // Expected output: "The, big, cat"
        Console.WriteLine(string.Join(", ", removeDups(new object[] { "John", "Taylor", "John" }))); // Expected output: "John, Taylor"


ر                                -----------------------------------------
            static object[] removeDups(object[] arr)
            {
                return arr.Distinct().ToArray();
            }

        ------------------------------------------------------------------------------------------
        // Task 13: Convert time from 12-hour AM/PM to 24-hour format
        ------------------------------------------------------------------------------------------

        Console.WriteLine(convertTime("07:05:45PM")); // Expected output: "19:05:45"
        Console.WriteLine(convertTime("12:40:22AM")); // Expected output: "00:40:22"
        Console.WriteLine(convertTime("12:45:54PM")); // Expected output: "12:45:54"


ر                                -----------------------------------------
        static string convertTime(string time)
        {
            return DateTime.Parse(time).ToString("HH:mm:ss");
        }

        ------------------------------------------------------------------------------------------
        // Task 14: Remove the last vowel in each word in a sentence
        ------------------------------------------------------------------------------------------

        Console.WriteLine(removeLastVowel("Those who dare to fail miserably can achieve greatly.")); // Expected output: "Thos wh dar t fal miserbly cn achiev gretly."
        Console.WriteLine(removeLastVowel("Love is a serious mental disease.")); // Expected output: "Lov s serios mentl diseas"


ر                                -----------------------------------------
        static string removeLastVowel(string sentence)
        {
            var words = sentence.Split(' ');
            for (int i = 0; i < words.Length; i++)
            {
                words[i] = System.Text.RegularExpressions.Regex.Replace(words[i], (at) "([aeiouAEIOU])[^aeiouAEIOU]*$", "");
            }
            return string.Join(" ", words);
        }

        ------------------------------------------------------------------------------------------
        // Task 15: Sum of cubes of numbers in an array
        ------------------------------------------------------------------------------------------

        Console.WriteLine(sumOfCubes(new int[] { 1, 5, 9 })); // Expected output: 855
        Console.WriteLine(sumOfCubes(new int[] { 3, 4, 5 })); // Expected output: 216
        Console.WriteLine(sumOfCubes(new int[] { 2 })); // Expected output: 8
        Console.WriteLine(sumOfCubes(new int[] { })); // Expected output: 0


ر                                -----------------------------------------
        static int sumOfCubes(int[] arr)
        {
            return arr.Sum(x => x * x * x);
        }


 


    }
}

</pre>
